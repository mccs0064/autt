<?php


class WizardRecord extends Accident
{

    public $note_type;
    public $claim_cost;
    public function rules()
    {
        return parent::rules(); // TODO: Change the autogenerated stub
    }

    public function afterSave()
    {
        $this->saveMyVehiclePhotos();
        $this->saveOtherVehiclePhotos();
        $this->saveOtherVehicles();
        $this->saveAudio();
        $this->savePoliceInfo();
    }

    private function saveMyVehiclePhotos()
    {
        if (Yii::app()->user->hasState('myPhotos'))
        {
            $photos=Yii::app()->user->getState('myPhotos');
            if(!empty($photos))
            {
                foreach($photos as $photo)
                {
                    $this->moveAndSave($photo,'Image','Self');
                }
            }
        }
    }
    private function saveOtherVehiclePhotos()
    {
        if (Yii::app()->user->hasState('otherPhotos'))
        {
            $photos=Yii::app()->user->getState('otherPhotos');
            if(!empty($photos))
            {
                foreach($photos as $photo)
                {
                    $this->moveAndSave($photo,'Image','Other');
                }
            }
        }
    }
    private function saveOtherVehicles()
    {
        if (Yii::app()->user->hasState('otherVehicles'))
        {
            $otherVehicles=Yii::app()->user->getState('otherVehicles');
            if(!empty($otherVehicles))
            {
                foreach($otherVehicles as $vehicle)
                {
                    $model=new AccidentVehicles();
                    $model->accident_id=$this->id;
                    $model->vehicle_reg=$vehicle['reg'];
                    $model->driver_name=!empty($vehicle['driver_name'])?$vehicle['driver_name']:null;
                    $model->phone_number=!empty($vehicle['phone_number'])?$vehicle['phone_number']:null;
                    $model->insurer=!empty($vehicle['insurer'])?$vehicle['insurer']:null;
                    $model->address=!empty($vehicle['address'])?$vehicle['address']:null;
                    $model->number_of_pessengers=!empty($vehicle['passengers'])?$vehicle['passengers']:null;
                    $model->save();
                }
            }
        }
    }
    private function saveDriverInfo()
    {
        if (Yii::app()->user->hasState('driver_info'))
        {
            $driverInfo=Yii::app()->user->getState('driver_info');
            if(!empty($driverInfo))
            {
                    $model=new AccidentDriver();
                    $model->attributes=$driverInfo;
                    $model->accident_id=$this->id;
                    $model->save();
            }
        }
    }
    private function saveAudio()
    {
        if (Yii::app()->user->hasState('audio'))
        {
            $audio=Yii::app()->user->getState('audio');
            if(!empty($audio))
            {
                $this->moveAndSave($audio,'Audio');
            }
        }
    }
    private function savePoliceInfo()
    {
        if (Yii::app()->user->hasState('police'))
        {
            $police=Yii::app()->user->getState('police');
            if(!empty($police))
            {
                $model=new AccidentPolice();
                $model->accident_id=$this->id;
                $model->attributes=$police;
                $model->save();
            }
        }
    }


    public function clearSessionAndFiles()
    {
        $dirPath='uploads/temp/accidents/'.AccidentWizard::getAccidentUniqueID();
        self::deleteDir($dirPath);
        Yii::app()->user->setState('basic_info',null);
        Yii::app()->user->setState('myPhotos',null);
        Yii::app()->user->setState('otherPhotos',null);
        Yii::app()->user->setState('otherVehicles',null);
        Yii::app()->user->setState('notes',null);
        Yii::app()->user->setState('police',null);
        Yii::app()->user->setState('audio',null);
        Yii::app()->user->setState('accidentUID',null);
        Yii::app()->user->setState('basicInfoValidated',null);
        Yii::app()->user->setState('driver_info',null);
    }

    public static function deleteDir($dirPath)
    {
        if (! is_dir($dirPath)) {
            throw new InvalidArgumentException("$dirPath must be a directory");
        }
        if (substr($dirPath, strlen($dirPath) - 1, 1) != '/') {
            $dirPath .= '/';
        }
        $files = glob($dirPath . '*', GLOB_MARK);
        foreach ($files as $file) {
            if (is_dir($file)) {
                self::deleteDir($file);
            } else {
                unlink($file);
            }
        }
        rmdir($dirPath);
    }



    private function moveAndSave($path,$media_type,$image_type=null)
    {
        $resumeDirectory = date('mY');

        $folder = 'uploads/' . $resumeDirectory . "/";
        if (!file_exists($folder)) {
            mkdir($folder, 0777);
        }
        $pathInfo=pathinfo($path);
        $fileName=$this->clean($pathInfo['basename']);
        $filePath=$folder.$fileName;
        copy($path,$filePath);
        $model=new AccidentMedia();
        $model->accident_id=$this->id;
        $model->directory_name=$resumeDirectory;
        $model->filename=$fileName;
        $model->media_type=$media_type;
        $model->image_type=$image_type;
        $model->save();

    }

    private function clean($string) {
       return preg_replace("([^\w\s\d\.\-_~,;:\[\]\(\)]|[\.]{2,})", '', $string);
    }

}
